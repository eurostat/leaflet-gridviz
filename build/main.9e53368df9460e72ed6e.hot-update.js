"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateleaflet_gridviz"]("main",{

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! leaflet */ \"./node_modules/leaflet/dist/leaflet-src.js\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var leaflet_canvas_layer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! leaflet-canvas-layer */ \"./node_modules/leaflet-canvas-layer/dist/leaflet-canvas-layer.js\");\n/* harmony import */ var leaflet_canvas_layer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(leaflet_canvas_layer__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var gridviz__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gridviz */ \"./node_modules/gridviz/dist/gridviz.min.js\");\n/* harmony import */ var gridviz__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(gridviz__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var proj4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! proj4 */ \"./node_modules/proj4/lib/index.js\");\n/* harmony import */ var proj4leaflet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! proj4leaflet */ \"./node_modules/proj4leaflet/src/proj4leaflet.js\");\n/* harmony import */ var proj4leaflet__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(proj4leaflet__WEBPACK_IMPORTED_MODULE_4__);\n\r\n\r\n\r\n\r\n\r\n\r\nproj4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].defs(\r\n    'EPSG:3035',\r\n    '+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs'\r\n)\r\n\r\n// TODO\r\n// instead of updating leaflet when gridviz pans and zooms, do it the other way around: disable zoom for griddviz and redraw the canvas when leaflet pans/zooms\r\n\r\n/** An extension of L.CanvasLayer (leaflet-canvas-layer) for integrating gridviz into Leaflet\r\n *  @description \r\n *  methods\tdescription\r\n    needRedraw - will schedule next frame call for drawLayer\r\n    delegate(object) - optionaly set receiver of the events if not 'inheriting' from L.CanvasLayer\r\n * \r\n */\r\nleaflet__WEBPACK_IMPORTED_MODULE_0__.GridvizLayer = function (opts) {\r\n    /**\r\n     * @description Options object defined by the user\r\n     *\r\n     */\r\n    opts = opts || {}\r\n\r\n    /**\r\n     * @description Layer (canvas) opacity\r\n     *\r\n     */\r\n    this.opacity = opts.opacity || 0.5\r\n\r\n    /**\r\n     * @description proj4 projection definition name. Make sure to add it using proj4.defs() first\r\n     *\r\n     */\r\n    this.proj = opts.proj || 'EPSG:3035'\r\n\r\n    /**\r\n     * @description gridviz app. see https://eurostat.github.io/gridviz/docs/reference\r\n     *\r\n     */\r\n    this.app = null\r\n\r\n    /**\r\n     * @description Include gridviz in output layer\r\n     *\r\n     */\r\n    this.gridviz = gridviz__WEBPACK_IMPORTED_MODULE_2__\r\n\r\n    /**\r\n     * @description Fires after leaflet layer canvas is attached/added to the map\r\n     *\r\n     */\r\n    this.onLayerDidMount = function () {\r\n        // build gridviz app\r\n        this.buildGridVizApp()\r\n\r\n        //set canvas opacity\r\n        //this.app.cg.canvas.style.opacity = this.opacity\r\n    }\r\n\r\n    /**\r\n     * @description Fires before layer is removed from the map\r\n     *\r\n     */\r\n    this.onLayerWillUnmount = function () {\r\n        // cleanup here?\r\n    }\r\n\r\n    /**\r\n     * @description Fires when layer data changes\r\n     *\r\n     */\r\n    this.setData = function (data) {\r\n        // -- custom data set\r\n        this.needRedraw() // -- call to drawLayer\r\n    }\r\n\r\n    /**\r\n     * @description Fires when layer is drawn, info contains view parameters like bounds, size, canvas etc.\r\n     * Here we need to feed gridviz it's new position and zoom, then redraw it's canvas\r\n     *\r\n     */\r\n    this.onDrawLayer = function (info) {\r\n        // set gridviz center and zoom to match leaflet\r\n        // for some reason info.center is inaccurate so we take the map center is WGS84 and project\r\n        let geoCenter = this.leafletToGeoCenter(this.map.getCenter())\r\n        let zoomFactor = this.leafletZoomToGridvizZoom()\r\n        this.app.setGeoCenter({ x: geoCenter[0], y: geoCenter[1] })\r\n        this.app.setZoomFactor(zoomFactor)\r\n        // redraw gridviz canvas\r\n        this.app.redraw()\r\n    }\r\n\r\n    /**\r\n     * @description Converts gridviz geoCenter to leaflet center\r\n     * proj4(fromProjection, toProjection, [coordinates])\r\n     *\r\n     */\r\n    this.geoCenterToLeaflet = function (x, y) {\r\n        let xy = (0,proj4__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.proj, 'WGS84', [x, y])\r\n        return [xy[1], xy[0]] // leaflet uses [lat,lon]\r\n    }\r\n\r\n    /**\r\n     * @description Converts leaflet center to gridviz proj geoCenter\r\n     * proj4(fromProjection, toProjection, [coordinates])\r\n     *\r\n     */\r\n    this.leafletToGeoCenter = function (latLon) {\r\n        return (0,proj4__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.proj, [latLon.lng, latLon.lat])\r\n    }\r\n\r\n    /**\r\n     * @description Converts leaflet zoom level to gridviz zoom factor (pixel size, in ground m)\r\n     *@deprecated\r\n     */\r\n    this.leafletZoomToGridvizZoom = function () {\r\n        return this.getMetresPerPixel()\r\n    }\r\n\r\n    /**\r\n     * @description Calculates meters per pixel at the current leaflet zoom level\r\n     *\r\n     */\r\n    this.getMetresPerPixel = function () {\r\n        let centerLatLng = this.map.getCenter() // get map center\r\n        let pointC = this.map.latLngToContainerPoint(centerLatLng) // convert to containerpoint (pixels)\r\n        let pointX = [pointC.x + 1, pointC.y] // add one pixel to x\r\n        let pointY = [pointC.x, pointC.y + 1] // add one pixel to y\r\n\r\n        // convert containerpoints to latlng's\r\n        let latLngC = this.map.containerPointToLatLng(pointC)\r\n        let latLngX = this.map.containerPointToLatLng(pointX)\r\n        let latLngY = this.map.containerPointToLatLng(pointY)\r\n\r\n        // let distanceX = latLngC.distanceTo(latLngX) // calculate distance between c and x (latitude)\r\n        // let distanceY = latLngC.distanceTo(latLngY) // calculate distance between c and y (longitude)\r\n\r\n        // convert to our projection\r\n        let projCenter = this.leafletToGeoCenter(latLngC)\r\n        let projX = this.leafletToGeoCenter(latLngX)\r\n        let difference = projX[0] - projCenter[0]\r\n\r\n        //console.log('zoom factor: ' + difference + '. Zoom level: ' + this.map._zoom)\r\n        return difference\r\n    }\r\n\r\n    /**\r\n     * @description build a gridviz app and add a layer to it\r\n     * gridviz api: https://eurostat.github.io/gridviz/docs/reference\r\n     */\r\n    this.buildGridVizApp = function () {\r\n        let container = this._canvas.parentElement\r\n        let geoCenter = this.leafletToGeoCenter(this.map.getCenter())\r\n\r\n        this.app = new gridviz__WEBPACK_IMPORTED_MODULE_2__.App(container, {\r\n            canvas: this._canvas,\r\n            w: window.innerWidth,\r\n            h: window.innerHeight,\r\n            disableZoom: true,\r\n            selectionRectangleColor: 'red',\r\n            selectionRectangleWidthPix: '4',\r\n            transparentBackground: true,\r\n        }).setGeoCenter({ x: geoCenter[0], y: geoCenter[1] })\r\n    }\r\n}\r\n\r\nleaflet__WEBPACK_IMPORTED_MODULE_0__.GridvizLayer.prototype = new leaflet_canvas_layer__WEBPACK_IMPORTED_MODULE_1__.CanvasLayer() // -- setup prototype\r\n\n\n//# sourceURL=webpack://leaflet-gridviz/./src/main.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("f3e51db684f8df6bc96a")
/******/ })();
/******/ 
/******/ }
);